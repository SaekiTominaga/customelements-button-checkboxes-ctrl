{"version":3,"sources":["ButtonCheckboxesCtrl.esm.js"],"names":["_course","_checkboxElements","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","ButtonCheckboxesCtrl","HTMLButtonElement","[object Object]","super","type","course","dataset","undefined","Error","targetsAncestorElementId","targetFor","targetElementsClass","targetsClass","targetElementsName","targetsName","targetsAncestorElement","document","getElementById","targetElements","querySelectorAll","length","Array","from","getElementsByClassName","getElementsByName","addEventListener","_clickEvent","passive","removeEventListener","checkboxUncheckedElement","filter","element","checked","checkboxCheckedElement","WeakMap"],"mappings":"AAAA,IAaIA,EAASC,EAbTC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,EAAYC,GAClG,IAAKD,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAGxB,OADAH,EAAWI,IAAIL,EAAUE,GAClBA,GAEPI,EAA0BP,MAAQA,KAAKO,wBAA2B,SAAUN,EAAUC,GACtF,IAAKA,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAExB,OAAOH,EAAWM,IAAIP,mBAQX,MAAMQ,UAA6BC,kBAC9CC,cACIC,QACAf,EAAQS,IAAIN,KAAM,MAClBF,EAAkBQ,IAAIN,KAAM,IAC5BA,KAAKa,KAAO,SAEhBF,oBACI,MAAMG,EAASd,KAAKe,QAAQD,OAC5B,OAAQA,GACJ,IAAK,QACL,IAAK,UACDf,EAAuBC,KAAMH,EAASiB,GACtC,MACJ,UAAKE,EACD,MAAM,IAAIC,MAAM,wCACpB,QACI,MAAM,IAAIA,MAAM,yEAExB,MAAMC,EAA2BlB,KAAKe,QAAQI,UACxCC,EAAsBpB,KAAKe,QAAQM,aACnCC,EAAqBtB,KAAKe,QAAQQ,YACxC,QAAiCP,IAA7BE,QAAkEF,IAAxBI,QAA4DJ,IAAvBM,EAC/E,MAAM,IAAIL,MAAM,2FAEpB,QAAiCD,IAA7BE,EAAwC,CACxC,MAAMM,EAAyBC,SAASC,eAAeR,GACvD,GAA+B,OAA3BM,EACA,MAAM,IAAIP,MAAM,aAAaC,oBAEjC,MAAMS,EAAiBH,EAAuBI,iBAAiB,0BAC/D,GAA8B,IAA1BD,EAAeE,OACf,MAAM,IAAIZ,MAAM,2DAA2DC,MAE/EnB,EAAuBC,KAAMF,EAAmBgC,MAAMC,KAAKJ,IAE/D,QAA4BX,IAAxBI,EAAmC,CACnC,MAAMO,EAAiBF,SAASO,uBAAuBZ,GACvD,GAA8B,IAA1BO,EAAeE,OACf,MAAM,IAAIZ,MAAM,aAAaG,oBAEjCrB,EAAuBC,KAAMF,EAAmBgC,MAAMC,KAAKJ,IAE/D,QAA2BX,IAAvBM,EAAkC,CAClC,MAAMK,EAAiBF,SAASQ,kBAAkBX,GAClD,GAA8B,IAA1BK,EAAeE,OACf,MAAM,IAAIZ,MAAM,kBAAkBK,qBAEtCvB,EAAuBC,KAAMF,EAAmBgC,MAAMC,KAAKJ,IAE/D3B,KAAKkC,iBAAiB,QAASlC,KAAKmC,YAAa,CAAEC,SAAS,IAEhEzB,uBACIX,KAAKqC,oBAAoB,QAASrC,KAAKmC,aAK3CxB,cACI,OAAQJ,EAAuBP,KAAMH,IACjC,IAAK,QAED,IAAK,MAAMyC,KAA4B/B,EAAuBP,KAAMF,GAAmByC,QAAQC,IAAaA,EAAQC,UAChHH,EAAyBG,SAAU,EAEvC,MAEJ,IAAK,UAED,IAAK,MAAMC,KAA0BnC,EAAuBP,KAAMF,GAAmByC,QAAQC,GAAYA,EAAQC,UAC7GC,EAAuBD,SAAU,IAOrD5C,EAAU,IAAI8C,QAAW7C,EAAoB,IAAI6C","file":"ButtonCheckboxesCtrl.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _course, _checkboxElements;\n/**\n * Button to check / uncheck all checkboxes by Custom Elements.\n *\n * @version 1.0.0\n */\nexport default class ButtonCheckboxesCtrl extends HTMLButtonElement {\n    constructor() {\n        super();\n        _course.set(this, null); // ボタンの機能（全選択 or 全解除）\n        _checkboxElements.set(this, []); // 対象のチェックボックス\n        this.type = 'button';\n    }\n    connectedCallback() {\n        const course = this.dataset.course;\n        switch (course) {\n            case 'check':\n            case 'uncheck':\n                __classPrivateFieldSet(this, _course, course);\n                break;\n            case undefined:\n                throw new Error('Attribute: `data-course` is not set.');\n            default:\n                throw new Error(\"Only 'check' or 'uncheck' can be set for the `data-course` attribute.\");\n        }\n        const targetsAncestorElementId = this.dataset.targetFor;\n        const targetElementsClass = this.dataset.targetsClass;\n        const targetElementsName = this.dataset.targetsName;\n        if (targetsAncestorElementId === undefined && targetElementsClass === undefined && targetElementsName === undefined) {\n            throw new Error('Attribute: `data-target-for` or `data-targets-class` or `data-targets-name` is not set.');\n        }\n        if (targetsAncestorElementId !== undefined) {\n            const targetsAncestorElement = document.getElementById(targetsAncestorElementId);\n            if (targetsAncestorElement === null) {\n                throw new Error(`Element: #${targetsAncestorElementId} can not found.`);\n            }\n            const targetElements = targetsAncestorElement.querySelectorAll('input[type=\"checkbox\"]');\n            if (targetElements.length === 0) {\n                throw new Error(`Checkbox does not exist in descendants of the Element: #${targetsAncestorElementId}.`);\n            }\n            __classPrivateFieldSet(this, _checkboxElements, Array.from(targetElements));\n        }\n        if (targetElementsClass !== undefined) {\n            const targetElements = document.getElementsByClassName(targetElementsClass);\n            if (targetElements.length === 0) {\n                throw new Error(`Element: .${targetElementsClass} can not found.`);\n            }\n            __classPrivateFieldSet(this, _checkboxElements, Array.from(targetElements));\n        }\n        if (targetElementsName !== undefined) {\n            const targetElements = document.getElementsByName(targetElementsName);\n            if (targetElements.length === 0) {\n                throw new Error(`Element: [name=${targetElementsName}] can not found.`);\n            }\n            __classPrivateFieldSet(this, _checkboxElements, Array.from(targetElements));\n        }\n        this.addEventListener('click', this._clickEvent, { passive: true });\n    }\n    disconnectedCallback() {\n        this.removeEventListener('click', this._clickEvent);\n    }\n    /**\n     * ボタン押下時の処理\n     */\n    _clickEvent() {\n        switch (__classPrivateFieldGet(this, _course)) {\n            case 'check': {\n                /* チェックボックスをすべてチェックする */\n                for (const checkboxUncheckedElement of __classPrivateFieldGet(this, _checkboxElements).filter((element) => !element.checked)) {\n                    checkboxUncheckedElement.checked = true;\n                }\n                break;\n            }\n            case 'uncheck': {\n                /* チェックボックスをすべて解除する */\n                for (const checkboxCheckedElement of __classPrivateFieldGet(this, _checkboxElements).filter((element) => element.checked)) {\n                    checkboxCheckedElement.checked = false;\n                }\n                break;\n            }\n        }\n    }\n}\n_course = new WeakMap(), _checkboxElements = new WeakMap();\n"]}